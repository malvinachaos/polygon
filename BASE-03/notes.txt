{примечания переводчицы - [SetGraphBufSize]
    {Объявление}
    Procedure SetGraphBufSize(BufSize: word);

    {Описание}
    


пд}
ВНИМАНИЕ! В LINUX USES ptcgraph;
{
    To Do:
    [ ] BGI
    [ ] SetGraphBufSize
    [ ] ClearDevice
    [ ] InstallUserDriver
    [ ] SetFillStyle
}


                            [Mode selection]

    Юнит graph был реализован для совместивости со старым юнитом graph. По
    этой причине, константы режима, как они были, такими и остались.

    Однако, поскольку
     1. Видеокарты сильно изменились
     2. Free Pascal работает на множестве платформ
    было решено реализовать новый режим и константы графического драйвера,
    которые более независимы от специфичных платформ, на которых запускают
    программы.

    Определены следующие драйверы:
    Каждый из этих драйверов указывает желаемую глубину цвета.

D1bit = 11;
D2bit = 12;
D4bit = 13;
D6bit = 14;  { 64 colors Half-brite mode - Amiga }
D8bit = 15;
D12bit = 16; { 4096 color modes HAM mode - Amiga }
D15bit = 17;
D16bit = 18;

lowNewDriver = 11;
highNewDriber = 21;

    Определены следующие режимы:

detectMode = 30000;
m320x200 = 30001;
m320x256 = 30002; { разрешение Amiga }
m320x400 = 30003; { разрешение Amiga/Atari }
m512x384 = 30004; { разрешение mac }
m640x200 = 30005; { vga resolution }
m640x256 = 30006; { amiga resolution (PAL) }
m640x350 = 30007; { vga resolution }
m640x400 = 30008;
m640x480 = 30009;
m800x600 = 30010;
m832x624 = 30011; { mac resolution }
m1024x768 = 30012;
m1280x1024 = 30013;
m1600x1200 = 30014;
m2048x1536 = 30015;

lowNewMode = 30001;
highNewMode = 30015;

    Эти режимы начинаются с трёх тысяч, потому что Borland указал, что номер
    режима должен возрастать, увеличивая разрешение X, и новые константы не
    должны мешать старым.

    Вышеуказанные константы могут быть использованы для установки определённых
    глубины цвета и разрешения. Если другие режимы, не из вышеуказанного
    списка, поддерживаются другой видеокартой, вы не сможете выбрать их с
    помощью этого механизма.

    По этой причине, есть ещё номер 'dynamic' режима, назначаемый во время
    выполнения. Это число увеличивается с возрастающим разрешением X. Его
    можно запросить с вызовом getmoderange. Данный вызов вернёт диапазон
    режимов, которые действительны для некоторых графичейских драйверов.
    Числа будут гарантировано последовательным и могут быть использоваы для
    поиска определённых разрешений.

    Таким образом, функция getmoderange могут быть использованы для
    обнаружения всех доступных режимов и драйверов.

                    
                    [Constants, Types and Variables]
[Types]

ArcCoordsType = record 
    X, Y, Xstart, Ystart, Xend, Yend : integer;
end;

FillPatternType = array [1..8] of byte;

FillSettingsType = record
    LineStyle, Pattern, Width : word;
end;

PaletteType = record
    Size: byte;
    Colors: array[0..MaxColor] of shortint;
end;

PointType = record
    X, Y: integer;
end;

TextSettingsType = record
    Font, Direction, CharSize, Horiz, Vert: word;
end;

ViewPortType = record
    X1, Y1, X2, Y2: integer;
    Clip: boolean;
end;


                        [Function list by category]

[Initialization]

    Инициализация графического экрана. ClearDevice очищает его.

CloseGraph - заканчивает сессию рисования, переводит в текстовый режим
DetectGraph - обнаруживает графические режимы
GetAspectRatio - получаем соотношение сторон экрана
GetModeRange - получаем диапазон допустимых режимов текущего драйвера
GraphDefaults - настройки по умолчанию
GetDriverName - возвращает имя графического драйвера
GetGraphMode - возвращает текущий или последний использовавшийся графический
               режим
GetMaxMode - получаем максимальный режим текущего режима
GetModeName - получаем имя текущего режима
GraphErrorMsg - строковое представление графической ошибки
GraphResult - результат последней операции рисования
InitGraph - инициализирование графических драйверов
InstallUserDriver - установка нового драйвера
RegisterBGIDriver - запись нового драйвера
RestoreCRTMode - вернуться в текстовый режим
SetGraphBufSize - настройка размера буффера для графических операций{
пд: нигде не используется. Проверить
}
SetGraphMode - настройка графического режима

    Общие функции управления рисунком экрана. 

ClearViewPort очищает сцену.

GetImage - копирует картинку с экрана в память
GetMaxX - получаем максимальную X координату
GetMaxY - получаем максимальную Y координату
GetX - получаем текущую X позицию
GetY - получаем текущую Y позицию
ImageSize - получаем размер выбранной картинки
GetViewSettings - получаем текущие настройки сцены
PutImage - копирует картинку из памяти в экран
SetActivePage - установит активную видео страницу
SetAspectRatio - установит соотношение сторон для рисования
SetWriteMode - установка режима записи для операции экрана

    Функции управления цветом. 

GetBkColor даёт текущий цвет заднего фона

GetColor - даёт текущий цвет переднего фона
GetDefaultPalette - даёт текущие записи палитры
GetMaxColor - даёт максимально доступный цвет
GetPaletteSize - даёт размер палитры текущего режима
GetPixel - даёт цвет выбранного пикселя
GetPalette - даёт запись палитры
SetAllPallette - установка все цвета в палитре
SetBkColor - установка цвета заднего фона
SetColor - установка цвета переднего фона
SetPalette - установка запись палитры
SetRGBPalette - установка запись палитры со значениями RGB

    Функции рисования примитивов.

Circle - круг
DrawPoly - полигон с N точками
Ellipse - эллипс
GetArcCoords - получаем координаты дуги
GetLineSettings - получаем текущие настройки рисования линии
Line - провести линию между двумя точками
LineRel - провести линию относительно текущей позиции
LineTo - провести линию от текущей позиции к абсолютной
MoveRel - перенести курсор относительно текущей позицией
MoveTo - перенести курсор к абсолютной позицией
PieSlice - рисует сектор круга
PutPixel - нарисовать 1 пиксель
Rectangle - рисует полый прямоугольник
Sector - рисует сектор
SetLineStyle - установка текущего стиля рисования линии

    Функции для рисования областей с заливкой

Bar3D - рисует заполненный {3D бар???}

Bar - рисует заполненный прямоугольник
FloodFill - заливка, начиная с координаты
FillEllipse - нарисовать заполненный эллипс
FillPoly - нарисовать заполненный полигон
GetFillPattern - получаем текущий образец заливки
GetFillSettings - получаем ткущие настройки заливки
SetFillStyle - настройка стиля заливки


    Функции для установки текстов на экран

GetTextSettings - получаем текущие настройки текста

InstallUserFont - установка нового шрифта
OutText - записать текст на текущее положение курсора
OutTextXY - записать текст с координатами X, Y
RegisterBGIFont - записать новый шрифт
SetTextJustify - установка выравнивания текста
SetTextStyle - установка стиля текста
SetUserCharSize - установка размера текста
TextHeight - рассчитать высоту текста
TextWidth - рассчитать ширину текста



                        [Functions and Procedures]


[Arc]
    {Объявление}
    Procedure Arc (X, Y: integer; start, stop, radius: word);

    {Описание}
    Arc рисует часть окружности с центром в (X, Y) радиусом radius, начиная
    с угла start, заканчивая углом stop. Эти углы измеряются против часовой
    стрелки.


[Bar]
    {Объявление}
    Procedure Bar (X1, Y1, X2, Y2: integer);

    {Описание}
    Рисует прямоугольник с углами в (X1,Y1) и (X2,Y2) и заполняет его текущим
    цветом и стилем.


[Bar3D]
    {Объявление}
    Procedure Bar3D (X1, Y1, X2, Y2: integer; depth: word; top: boolean);

    {Описание}
    Рисует трёхмерную полосу с углами в (X1,Y1) и (X2,Y2) и заполняет его
    текущим цветом и стилем. depth указывет количество пикселей, используемых
    для отображения глубины полосы.


[Circle]
    {Объявление}
    Procedure Circle (X, Y: integer; radius: word);

    {Описание}
    Рисует окружность с центром в (X,Y) с радиусом radius


[ClearDevice]
    {Объявление}
    Procedure ClearDevice;

    {Объявление}
    Очищает экран с текущим цветом заднего экран и устанавливает указатель на
    (0, 0) {может быть, курсор вместо указателя?}


[ClearViewPort]
    {Объявление}
    Procedure ClearViewPort;

    {Описание}
    Очищает текущую сцену. Устанавливает цвет заднего фона


[CloseGraph]
    {Объявление}
    Procedure CloseGraph;

    {Описание}
    Закрывает систему графиуи и восстанавливает тот режим экрана, который был
    активный перед этим


[DetectGraph]
    {Объявление}
    Procedure DetectGraph(var Driver, Modus: integer);

    {Описание}
    Проверяет оборудоваение в компьютере и определяет драйвер и экранный режим
    к использованию. Они возвращаются в Driver и Modus, может быть скормлен
    InitGraph. См. InitGraph для списка драцверов и режимов.


[DrawPoly]
    {Объявление}
    Procedure DrawPoly(NumberOfPoints: word; var PolyPoints);

    {Описание}
    Рисует полигон с количеством вершин NumberOfPoints, использующий текущий
    цвет и стиль линии. PolyPoints - массив типа PointType.


[Ellipse]
    {Объявление}
    Procedure Ellipse(X, Y: integer; Start, Stop, XRadius, YRadius: word);

    {Описание}
    Рисует эллипс, центром в (X, Y). XRadius и YRadius - это горизонтальный и
    вертикальный радиус эллипса соответственно. Start и Stop - углы начала и
    конца части эллипса. Они измеряются против часовой стрелки от оси X.


[FillEllipse]
    {Объявление}
    Procedure FillEllipse(X, Y: integer; Xradius, YRadius: word);

    {Описание}
    Рисует такой же эллипс, только закрашенный текущим цветом.


[FillPoly]
    {Объявление}
    Procedure FillPoly(NumberOfPoints: word; var PolyPoints);

    {Описание}
    Рисует такой же полигон, тольько закращенный текущим цветом.


[FloodFill]
    {Объявление}
    Procedure FloodFill(X, Y: integer; BorderColor: word);

    {Описание}
    Заполняет область в точке(X,Y), ограниченную цветом BorderColor.


[GetArcCoords]
    {Объявление}
    Procedure GetArcCoords(var ArcCoords: ArcCoordsType);

    {Описание}
    Процедура возвращает коортинаты последнего вызова Arc или Ellipse


[GetAspectRatio]
    {Объявление}
    Procedure GetAspectRatio(var Xasp, Yasp: word);

    {Описание}
    Определяет эффективное разрешение экрана. Соотношение сторон может быть
    посчитано как Xasp/Yasp.


[GetBkColor]
    {Объявление}
    Function GetBkColor: word;

    {Описание}
    Возвращает текущий цвет заднего фона(с записи паитры).


[GetColor]
    {Объявление}
    Function GetColor: word;

    {Описание}
    Возвращает текущий цвет для рисования.


[GetDefaultPalette]
    {Объявление}
    Procedure GetDefaultPalette(var Palette: PaletteType);

    {Описание}
    Возвращает текущую палитру в Palette.


[GetDriverName]
    {Объявление}
    Function GetDriverName: string;

    {Описание}
    Возвращает строку, содержащий имя текущего драйвера.


[GetFillPattern]
    {Объявление}
    Procedure GetFillPattern(var FillPattern: FillPatternType);

    {Описание}
    Возвращает массив с текущим шаблоном заливки в FillPattern.


[GetFillSettings]
    {Объявление}
    Procedure GetFillSettings(var FillInfo: FillSettingsType);

    {Описание}
    Возвращает текущие настройки заливки в FillInfo.


[GetGraphMode]
    {Объявление}
    Function GetGraphMode: integer;

    {Описание}
    Возвращает текущий режим графики.


[GetImage]
    {Объявление}
    Procedure GetImage(X1, Y1, X2, Y2: integer; Var Bitmap);

    {Описание}
    Помещает копию область экрана (X1,Y1) на (X2,Y2) в BitMap


[GetLineSettings]
    {Объявление}
    Procedure GetLineSettings (var LineInfo: LineSettingsType);

    {Описание}
    Возвращает текующие настройки Line в LineInfo


[GetMaxColor]
    {Объявление}
    Function GetMaxColor: word;

    {Описание}
    Возвращает максимум цветогого номера, который может быть использован с
    SetColor. Напротив, этот цвет не всегда гарантировано будет белым. Например,
    в режиме 256+ цветов.


[GetMaxMode]
    {Объявление}
    Function GetMaxMode: word;

    {Описание}
    Возвращает наивысший режим для текущего драйвера.


[GetMaxX]
    {Объявление}
    Function GetMaxX: word;
    
    {Описание}
    Возвращает максимальную длину экрана.


[GetMaxY]
    {Объявление}
    Function GetMaxY: word;
    
    {Описание}
    Возвращает максимальную ширину экрана.


[GetModeName]
    {Объявление}
    Function GetModeName(var modus: integer): string;
    
    {Описание}
    Возвращает строку с именем режима.


[GetModeRange]
    {Объявление}
    Procedure GetModeRange(Driver: integer; var LoModus, HiModus: integer);
    
    {Описание}
    Возвращает наименьший и наибольший режим текущего установленного драйвера.
    Если никакие режимы не поддерживают этот драйвер, HiModus вернёт -1.


[GetPalette]
    {Объявление}
    Procedure GetPalette(var Palette: PaletteType);
    
    {Описание}
    Возвращает в Palette текущую палитру.


[GetPaletteSize]
    {Объявление}
    Function GetPaletteSize: word;
    
    {Описание}
    Возвращает наибольшее количество записей в текущей палитре.


[GetPixel]
    {Объявление}
    Function GetPixel(X, Y: integer): word;
    
    {Описание}
    Возвращает цвет точки в (X,Y).


[GetTextSettings]
    {Объявление}
    Procedure GetTextSettings(var TextInfo: TextSettingsType);
    
    {Описание}
    Возвращает текущий стиль настройки текста:
    Шрифт, направление, размер и положение с SetTextStyle и SetTextJustify.


[GetViewSettings]
    {Объявление}
    Procedure GetViewSettings(var ViewPort: ViewPortType);
    
    {Описание}
    Возвращает текущую сцену и настройки обрезки в ViewPort.


[GetX]
    {Объявление}
    Function GetX: integer;
    
    {Описание}
    Возвращает X-координату текущей позицией графичекого курсора.


[GetY]
    {Объявление}
    Function GetY: integer;
    
    {Описание}
    Возвращает Y-коодинату текущей позицией графического курсора.


[GraphDefaults]
    {Объявление}
    Procedure GraphDefaults;
    
    {Описание}
    Сбрасывает все настройки для сцены, палитры, переднего заднего планов, стиль
    линии, стиль и цвет заполнения, шрифт, размещение и размер текста.


[GraphErrorMsg]
    {Объявление}
    Function GraphErrorMsg(ErrorCode: integer): string;    

    {Описание}
    Возвращает строку с поясняющей ошибкой ErrorCode. Эта строка может быть
    использована, чтобы дать пользователю понять, что что-то пошло не так.


[GraphResult]
    {Объявление}
    Function GraphResult: integer;

    {Описание}
    Возвращает код ошибки последней графической операции. Если возвращаемое 
    значение 0 - всё прошло удачно. Значение, отличное от нуля, означает, что
    произошла ошибка. Кроме того, все операции, которые что-то рисуют на экране,
    следующие процедуры также могут дать GraphResult значение, отличное от нуля:

        * InstallUserFont
        * SetLineStyle
        * SetWriteMode
        * SetFillStyle
        * SetGraphMode
        * SetTextStyle


[ImageSize]
    {Объявление}
    Function ImageSize(X1, Y1, X2, Y2: integer): word;

    {Описание}
    Возвращает значение количества байтов, нужных для хранения картинки в
    прямоугольнике, определённом на (X1, Y1) и (X2, Y2).


[InitGraph]
    {Объявление}
    Procedure InitGraph(var GraphDriver, GraphModus: integer; 
                        const PathToDriver: string);

    {Описание}
    Инициализирует графику. GraphDriver имеет два допустимых значения:
    GraphDriver=0, что значит автоматическое опреление и инициализирует максимально
    возможный редим с наибольшим количеством цветов. 
    {пд:
        В той статье было сказано, что максимально поддерживаемый режим драйвером
        1024x786x64K, чтобы добиться более выского разрешения, надо отредактировать
        MODES.PPI. Сейчас это уже не актуально: современный fpc, как минимум,
        вытягивает 1920x1080. 
    }
    Если нужен другой режим, тогда установите значение для GraphDriver отличное от
    нуля и GraphModus на желаемый вам режим(VESA-режимы, где 640x480x256 это 101h
    и т.д.). PathToDriver нужен, если вы используете BGI-шрифты из Borland.
    fpc не имеет таких шрифтов, их надо приобретать отдельно.

    {Пример:}
.-------------------------------------------------------------------------.
|USES ptcgraph;                                                           |
|                                                                         |
|VAR gd, gm: integer;                                                     |
|    pathtodriver: string;                                                |
|                                                                         |
|BEGIN                                                                    |
|    gd:= detect; {наибольшее возможное разрешение}                       |
|    gm:= 0; {необязательно, определяется автоматически}                  |
|    pathtodriver:= 'C:\PP\BGI'; {путь до BGI-шрифтов, драйверы не нужны} |
|                                                                         |
|    InitGraph(gd, gm, PathToDriver);                                     |
|                                                                         |
|    if GraphResult <> grok then halt;                                    |
|                                                                         |
|    {... графические операции}                                           |
|                                                                         |
|    CloseGraph; {восстанавливает предыдущий графический режим}           |
|END.                                                                     |
*-------------------------------------------------------------------------*


[InstallUserDriver]
    {Объявление}
    Function InstallUserDriver(DriverPath: string; AutoDetectPtr:pointer): integer;

    {Описание}
    Добавляет устройство-драйвер DriVerPAth в список .BGI драйверов. AutoDetectPtr
    - это указатель на возможную функцию автоопределения.
    {пд: как???}


[Line]
    {Объявление}
    Procedure Line(X1, Y1, X2, Y2: integer);

    {Описание}
    Рисует линию от (X1,Y1) к (X2,Y2), с текущим стилем и цветом. Текущая позиция
    граф курсора устанавливается на (X2,Y2).


[LineRel]
    {Объявление}
    Procedure LineRel(DX, DY: integer);

    {Описание}
    Рисует линию, начиная от текущей позиции курсора к точке (DX, DY) относительно
    начальной точки, с текущим цветом и стилем. Позиция курсора устанавливается на
    (DX, DY).


[LineTo]
    {Объявление}
    Procedure LineTo(X, Y: integer);

    {Описание}
    Рисует линию, начиная от текущей позиуии курсора к точке (X, Y) относительно 
    начальной точки, с текущим цветом и стилем. Позиция курсора устанавливается на
    (X, Y).


[MoveRel]
    {Объявление}
    Procedure MoveRel(DX, DY: integer);

    {Описание}
    Перемещает курсор к точке (DX, DY), относительно текущей позиции курсора.


[MoveTo]
    {Объявление}
    Procedure MoveTo(X, Y: integer);

    {Описание}
    Двигает курсор к точке (X, Y).


[OutTextXY]
    {Объявление}
    Procedure OutTextXY(X, Y: integer; const TextString: string);

    {Описание}
    Выводит TextString на экран в точке (X, Y), используя текущие натройки шрифта.
    Курсор перемезается в конец текста.


[PieSlice]
    {Объявление}
    Procedure PieSlice(X, Y: integer; Start, Stop, Radius: word);

    {Описание}
    Рисует и заливает сектор круга с центром (X, Y) и радиусом Radius, угол
    которого начинается в Start и заканчивается в Stop.


[PutImage]
    {Объявление}
    Procedure PutImage(X1, Y1: integer; var BitMap; How: word);

    {Описание}
    Помещает битовую карту экрана в (X1, Y1) в BitMat. How определет как битовая
    карта будет помещаться на экране. Возможные значения:

        * CopyPut
        * XORPut
        * ORPut
        * AndPut
        * NotPut


[PutPixel]
    {Объявление}
    Procedure PutPixel(X, Y: integer; Color: word);

    {Описание}
    Рисует пиксель в точке (X, Y), используя цвет Color.


[Rectangle]
    {Объявление}
    Procedure (X1, Y1, X2, Y2: integer);

    {Описание}
    Рисует прямоугольник с углами в (X1, Y1) и (X2, Y2), используя текущий цвет и
    стиль.



[RegisterBGIFont]
    {Объявление}
    Function RegisterBGIFont(Font: pointer): integer;

    {Описание}
    Регистрирует пользовательский BGI драйвер/


[RestoreCRTMode]
    {Объявление}
    Procedure RestoreCRTMode;

    {Описание}
    Восстанавливает режим экрана, который был активен перед тем, как запустился
    графический режим. Для того, чтобы вернуться в последний графический режим,
    вы можете воспользоваться SetGraphMode(GetGraphMode).


[Sector]
    {Объявление}
    Procedure Sector(X, Y: integer; Start, Stop, XRadius, YRadius: word);

    {Описание}
    Рисует и заливает сектор эллипса с центром (X, Y), радиусами XRadius и YRadius,
    начиная с угла Start и заканчивая углом Stop.    


[SetActivePage]
    {Объявление}
    Procedure SetActivePage(page: word);

    {Описание}
    Устанавливает page за активную страницу для всего графического вывода.


[SetAllPallette]
    {Объявление}
    Procedure SetAllPallette(var Palette);

    {Описание}
    Устанавливает текущую палитру в Palette - неопределённая переменная, обычно
    указывает на запись типа PaletteType.


[SetAspectRatio]
    {Объявление}
    Procedure SetAspectRatio(Xasp, Yasp: word);

    {Описание}
    Устанавливает соотношение сторон текущего экрана в Xasp/Yasp.
    {пд: как я понимаю, типа 16:9, 16:10}


[SetBkColor]
    {Объявление}
    Procedure SetBkColor(Color: word);

    {Описание}
    Устанавливает цвет заднего фона Color.

    
[SetColor]
    {Объявление}
    Procedure SetColor(Color: word);

    {Описание}
    Устанавливает цвет Color.

    
[SetFillPattern]
    {Объявление}
    Procedure SetFillPattern(FillPattern: FillPatternType; Color: word);

    {Описание}
    Устанавливает текущий шаблон заливки в FillPattern и цвет заливки Color.
    Шаблон представляет собой растр 8х8, соответствующий 64 битам в FillPattern.


[SetFillStyle]
    {Объявление}
    Procedure SetFillStyle(Pattern, Color: word);

    {Описание}
    Устанавливает шаблон и цвет заливки. Шаблоны:

        * 'EmpyFill' - использует цвет заднего фона.
        * 'SolidFill' - цвет заливки.
        * 'LineFill' - заливка горизонтальными линиями.
        * 'LtSlashFill' - заполняет линиями. {пд: диагональню? штрих? 'left-under'}
        * 'SlashFill' - предыдущее, линии потолще.
        * 'BkSlashFill' - обратный {штрих} толстыми линиями.
        * 'LtBkslashFill' - обратный {штрих.}
        * 'HatchFill' - штриховка.
        * 'XHatchFill' - штриховка, повёрнутая на 45 градусов.
        * 'InterLeaveFill' - {пд: !!!}
        * 'WideDotFill' - заливка точками, широкое пространство между ними.
        * 'CloseDotFill' - заливка точками, узкое пространоство между ними.
        * 'UserFill' - заливает пользовательским шаблоном.


[SetGraphMode]
    {Объявление}
    Procedure SetGraphMode(Mode: integer);

    {Описание}
    Настраивает графический режим и очищает экран.


 [SetLineStyle]
    {Объявление}
    Procedure SetLineStyle(LineStyle, Pattern, Width: word);

    {Описание}
    Настраивает стиль рисования линий. Список LineStyle:

        * 'Solid=0' - 


[]
    {Объявление}


    {Описание}
        * 'DefaultFont=0';
        * 'TriplexFont=2';
        * 'SmallFont=2';
        * 'SansSerifFont=3';
        * 'GothicFont=4';

        * 'HorizDir=0';
        * 'VertDir=1';

[]
    {Объявление}


    {Описание}


[]
    {Объявление}


    {Описание}


[]
    {Объявление}


    {Описание}


[]
    {Объявление}


    {Описание}


[]
    {Объявление}


    {Описание}


[]
    {Объявление}


    {Описание}



