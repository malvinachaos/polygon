Ввод через пробелы:
a, b = input().split()
a = int(a)
b = int(b)

ЕЩЁ ЛУЧШЕ:
a, b = (int(i) for i in input().split())

Постоянно забываю о методах строк:
s.upper()
s.lower()
s.count(p) сколько раз p встречается в s
s.find(p) индекс первого вхождения p в s
s.replace('c', 'C') заменит все вхождения 'c' на 'C'


Методы списков:
l.append(element) # добавление в конец списка элемента
l.insert(1, element) # добавит на позицию 1 элемент, сдвинув остальные 
					 # вправо

Удаление элемента:
l.remove(элемент)

del l[индекс]

num = l.index(элемент)

Сортировка списка
ordered = sorted(l) # Изначальный список не меняется
l.sort() # Меняет изначальный список
min() # возвращает минимальный элемент списка
max() # возвращает максимальный элемент списка

Список в обратном порядке
l.reverse() # перевернёт список в обратном порядке
reversed(l) # выведет список в обратном порядке

Важный момент с присвоениями списков
a = [1, 'A', 2]
b = a
a[0] = 42
print(a) # [42, 'A', 2]
print(b) # [42, 'A', 2]

b[2] = 30
print(a) # [42, 'A', 30]
print(b) # [42, 'A', 30]

Тут, при присвоении в памяти компьютера создаётся объект списка и 
переменная a ссылается на этот список. Присвоив b значение a, первое
связывается с a и так же ссылается на этот объект

Генерация списков
	Инициация списка с одинаковыми элементами
	a = [0]*5 # [0, 0, 0, 0, 0,]

	...
	a = [i for i in range(5)] # [0, 1, 2, 3, 4]
	
	Ввод данных через клавиатуру с помощью пробелов
	a = [int(i) for i in input().split()]
	```
	Ввод:
	9 8 7 6
	Вывод:
	[9, 8, 7, 6]
	```

Генерация двумерных списков
n = 3
a = [[0] * n] * n
'''
вывод такой матрицы:
0  0  0
0  0  0
0  0  0
'''

a[0][0] = 5
'''
вывод такой матрицы:
5  0  0
5  0  0
5  0  0
'''

Прикол в специфичном создании списка. Сначала создали списрк из трёх
нулей, а потом список создали как n ссылок на изначальный список,
каждый элемент a это ссылка на один и тот же объект

Чтобы обойти этот прикол, можно создать при помощи генератора*

a = [[0] * n for i in range(n)]
a = [[0 for j in range(n)] for i in range(n)]

Сапёр
Даны размеры поля для игры в сапёр и координаты мин, стоящих на этом
поле. Вывести поле игры на экран
Ввод данных: число строк, число столбцов, количество мин, а потом
координаты мины

5 4 4
1 1
2 2
3 2
4 4

Вывод:
* 2 1 .
3 * 2 .
2 * 3 1
1 1 2 *
. . 1 1

Сначала создаётся матрица и наполняется нулями. Потом, по координатам,
ставим мины (-1)

Считаем мины в соседних клетках: если есть, то увеличиваем количество

     |           
     v           
    |-|-|-|-|-|-|
  ->|*| | | | | |
    |-|-|-|-|-|-|
    | | | |*| | |
    |-|-|-|-|-|-|
    | | | | | |*|
    |-|-|-|-|-|-|
