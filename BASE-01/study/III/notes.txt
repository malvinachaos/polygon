Функции:

 * Без возвращаемого значения
 * Без параматеров
 * Произовльное число параметров
 * Параметры со значениями по умолчанию

Произвольное число параметров
#       |
#       | Звёздочка означает, что наша функция может принимать произвольное
#       v количество аргументов (похоже, передаётся адресс)
def minimum(*a):
    m = a[0]
    for x in a:
        if m > x:
            m = x
    return m

def my_range(start, stop, step=1) # все значения по умолчанию указываются в 
                                  # конце списка параметров функции

my_range(stop=20, start=0) # <- то есть, мы можем явно вызвать переменную, переставив их местами

Изменение объектов, свяханных с локальными переменными
def append_zero(xs):
    xs.append(0)

a = []          # 1
append_zero(a)  # 2
print(a) #[0]
'''
Прикол в том, что мы создали ссылку на объект 'список' (1)
Передав её в качестве аргумента функции append_zero (2) мы связали их и теперь
#xs и a ссылаются на один и тот же объект
'''

Однако
def append_zero(xs):
    xs.append(0)
    xs = [100] # (3)

a = []
append_zero(a)
print(a) # выведет [0]
'''
Тут мы (3) связали xs с другим объектом
'''

Глобальные и локальные переменные
def print_value():
    print(a)

a = 10
print_value()
'''
Выведет 10, так как a -- глобальная переменная, её можно использовать во всей
программе. Такое работает, если перед вызовом функции мы инициализировали 
переменную a
'''

Однако
def print_value():
    print(a)
    a = 10
    print(a)

a = 5
print_value()
UnboundLocalError: local variable 'a' referenced before assignment
'''
Если мы попытаемся изменить значение внутри переменной, то она считается локальной
А по скольку, a -- глобальная, то это вызовет ошибку
'''
